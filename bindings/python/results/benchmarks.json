{
    "benchmarks.ProfileInsert.time_insert_arrow": {
        "code": "class ProfileInsert:\n    def time_insert_arrow(self):\n        write(db[collection_names[CUR_SIZE]], arrow_tables[CUR_SIZE])\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileInsert.time_insert_arrow",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "811336d71f8d0e41da0a865986a3e2812d4c6a3863926e52eee1a8e3f5391290",
        "warmup_time": -1
    },
    "benchmarks.ProfileInsert.time_insert_conventional": {
        "code": "class ProfileInsert:\n    def time_insert_conventional(self):\n        tab = arrow_tables[CUR_SIZE].to_pylist()\n        db[collection_names[CUR_SIZE]].insert_many(tab)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileInsert.time_insert_conventional",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a4248277b8ff6c41e4558ef4c37e0828a8e12ce109a1b9cf5068d3ad23bf5e44",
        "warmup_time": -1
    },
    "benchmarks.ProfileInsert.time_insert_numpy": {
        "code": "class ProfileInsert:\n    def time_insert_numpy(self):\n        write(db[collection_names[CUR_SIZE]], numpy_arrays[CUR_SIZE])\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileInsert.time_insert_numpy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "979c55b6392ab7181eddf8199e0557a1de11d2347a1a4b43d6b477efabb487f9",
        "warmup_time": -1
    },
    "benchmarks.ProfileInsert.time_insert_pandas": {
        "code": "class ProfileInsert:\n    def time_insert_pandas(self):\n        write(db[collection_names[CUR_SIZE]], pandas_tables[CUR_SIZE])\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileInsert.time_insert_pandas",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ef4d3410ec539db7d5306ecbbd67d4501fb8ba76267e354d8b2f5e6ef3ca4053",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_conventional_ndarray": {
        "code": "class ProfileRead:\n    def time_conventional_ndarray(self):\n        collection = db[collection_names[CUR_SIZE]]\n        cursor = collection.find()\n        dtype = dtypes[CUR_SIZE]\n    \n        if CUR_SIZE == LARGE:\n            np.array([tuple(doc[k] for k in large_doc_keys) for doc in cursor], dtype=dtype)\n        else:\n            np.array([(doc[\"x\"], doc[\"y\"]) for doc in cursor], dtype=dtype)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_conventional_ndarray",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1003919eb568e3c51757859c4311bc08504c29a8f5f99dff945fb78e6110e2cb",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_conventional_pandas": {
        "code": "class ProfileRead:\n    def time_conventional_pandas(self):\n        collection = db[collection_names[CUR_SIZE]]\n        _ = dtypes[CUR_SIZE]\n        cursor = collection.find(projection={\"_id\": 0})\n        _ = pd.DataFrame(list(cursor))\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_conventional_pandas",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "faa3531a1fca7664679113b51e521c35310edc27a2869607c9f9e42cb60a29e5",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_to_arrow": {
        "code": "class ProfileRead:\n    def time_to_arrow(self):\n        c = db[collection_names[CUR_SIZE]]\n        schema = schemas[CUR_SIZE]\n        find_arrow_all(c, {}, schema=schema)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_to_arrow",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9b599faeaddb478376f214b6859ae22df6dc7337c2d1956a8e1a0a4e03530ec5",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_to_arrow_arrays": {
        "code": "class ProfileRead:\n    def time_to_arrow_arrays(self):\n        c = db[collection_names[CUR_SIZE]]\n        schema = schemas[LIST+CUR_SIZE]\n        table = find_arrow_all(c, {}, schema=schema, projection={\"_id\": 0})\n        self.exercise_table(table)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_to_arrow_arrays",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fab31ce4e2e53d33a07cee238bf9583fecda6e592190526ee20a8f1f8eff11f4",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_to_conventional_arrays": {
        "code": "class ProfileRead:\n    def time_to_conventional_arrays(self):\n        c = db[collection_names[CUR_SIZE]]\n        f = list(c.find({}, projection={\"_id\": 0}))\n        table = pyarrow.Table.from_pylist(f)\n        self.exercise_table(table)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_to_conventional_arrays",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3186083d201c174730b240384917f1c26edddde4439156f88d7c337a8716f923",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_to_numpy": {
        "code": "class ProfileRead:\n    def time_to_numpy(self):\n        c = db[collection_names[CUR_SIZE]]\n        schema = schemas[CUR_SIZE]\n        find_numpy_all(c, {}, schema=schema)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_to_numpy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d390a202dbfb663900142c6aa2bbd6208228f82cccb27ee030be38b3fbf0c360",
        "warmup_time": -1
    },
    "benchmarks.ProfileRead.time_to_pandas": {
        "code": "class ProfileRead:\n    def time_to_pandas(self):\n        c = db[collection_names[CUR_SIZE]]\n        schema = schemas[CUR_SIZE]\n        find_pandas_all(c, {}, schema=schema)\n\n    def setup(self):\n        db[collection_names[CUR_SIZE]].drop()",
        "min_run_count": 2,
        "name": "benchmarks.ProfileRead.time_to_pandas",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0ec378890f78ed70cdf3fdb2c5b588ca19e2a2ff3624d01fc4eb2ff425076882",
        "warmup_time": -1
    },
    "version": 2
}